{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Newton\\\\source\\\\repos\\\\nfgallimore\\\\InventoryApp\\\\InventoryApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Newton\\\\source\\\\repos\\\\nfgallimore\\\\InventoryApp\\\\InventoryApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Order } from '../models';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var OrdersService = /*#__PURE__*/(function () {\n  var OrdersService = /*#__PURE__*/function () {\n    function OrdersService(httpClient) {\n      _classCallCheck(this, OrdersService);\n\n      this.httpClient = httpClient;\n    }\n\n    _createClass(OrdersService, [{\n      key: \"getOrders\",\n      value: function getOrders() {\n        // use http client to make a GET request to API\n        return this.httpClient.get(\"\".concat(environment.apiUrl, \"/v1/Orders\")) // this pipe + map essentially chains a function onto the end of the GET request, so that when\n        // the GET request finishes, the inner part of this pipe will execute.\n        .pipe(map(function (resp) {\n          try {\n            // convert the json response into an array of Orders\n            return Order.fromJsonArray(resp);\n          } catch (err) {\n            // if error occurs throw an exception\n            throw new Error(err);\n          }\n        }));\n      }\n    }, {\n      key: \"deleteOrder\",\n      value: function deleteOrder(id) {\n        return this.httpClient.delete(\"\".concat(environment.apiUrl, \"/v1/Orders?id=\").concat(id));\n      }\n    }, {\n      key: \"updateOrder\",\n      value: function updateOrder(order) {\n        return this.httpClient.put(\"\".concat(environment.apiUrl, \"/v1/Orders\"), order);\n      }\n    }, {\n      key: \"createOrder\",\n      value: function createOrder(order) {\n        return this.httpClient.post(\"\".concat(environment.apiUrl, \"/v1/Orders\"), order);\n      }\n    }]);\n\n    return OrdersService;\n  }();\n\n  OrdersService.ɵfac = function OrdersService_Factory(t) {\n    return new (t || OrdersService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  OrdersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdersService,\n    factory: OrdersService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrdersService;\n})();","map":null,"metadata":{},"sourceType":"module"}